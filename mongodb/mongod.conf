# MongoDB Configuration File
# WildDuck Mail Server Production Configuration
# MongoDB Version: 7.0
#
# Server Configuration:
# - Total RAM: 128GB (96GB available for native services after VMware allocation)
# - Storage: 10TB RAID6 SSD (very fast, high IOPS, excellent for mail storage)
# - MongoDB allocation: ~47GB RAM (50% of available native RAM)
# - PostgreSQL uses remaining ~48GB RAM
#
# Deploy to: C:\Program Files\MongoDB\Server\7.0\bin\mongod.cfg
#            or C:\MongoDB\mongod.cfg (custom installation)
#
# After editing, restart MongoDB:
#   Restart-Service MongoDB

# ==============================================================================
# NETWORK INTERFACES
# ==============================================================================

net:
  # Port to listen on (default: 27017)
  port: 27017

  # Bind to all network interfaces for remote access
  # SECURITY: For production, specify exact IPs instead of 0.0.0.0
  # Examples:
  #   bindIp: 127.0.0.1,192.168.1.100  # Local + specific IP
  #   bindIp: 0.0.0.0                  # All interfaces (development only)
  bindIp: 0.0.0.0

  # Maximum incoming connections
  # Default: depends on system (ulimit)
  # For high-capacity server: 5000 connections
  maxIncomingConnections: 5000

  # Enable IPv6
  ipv6: true

  # Wire protocol compression (MongoDB 3.6+)
  # Reduces network bandwidth usage
  compression:
    compressors: snappy,zstd

# ==============================================================================
# SECURITY
# ==============================================================================

security:
  # Enable authentication (REQUIRED for production)
  authorization: enabled

  # JavaScript execution (disable for better security)
  # WildDuck doesn't use server-side JS, safe to disable
  javascriptEnabled: false

  # Encryption at rest (Enterprise only)
  # For Community Edition, use disk-level encryption instead
  # enableEncryption: true
  # encryptionKeyFile: C:\MongoDB\keyfile

# ==============================================================================
# STORAGE
# ==============================================================================

storage:
  # Database storage path
  # IMPORTANT: Ensure this directory exists and MongoDB has write access
  # For Windows: Use forward slashes or escaped backslashes
  dbPath: C:\MongoDB\data

  # Storage engine (WiredTiger is default and recommended)
  engine: wiredTiger

  # Journal for write durability
  journal:
    enabled: true
    commitIntervalMs: 100  # Commit every 100ms (default)

  # Directory for journal files (optional, defaults to dbPath)
  # directoryPerDB: true  # Uncomment to separate each DB into its own directory

  # Synchronization mode for journal writes
  # For maximum document storage performance with RAID6 SSD:
  # Keep default settings for data safety while leveraging SSD speed
  syncPeriodSecs: 60  # Sync to disk every 60 seconds (default)

  # WiredTiger storage engine options
  wiredTiger:
    engineConfig:
      # Cache size (default: 50% of RAM minus 1GB)
      # For 96GB available RAM: 47GB cache (50% of available RAM minus 1GB)
      # This allows MongoDB to cache hot data effectively for WildDuck mail storage
      cacheSizeGB: 47

      # Journal compressor (snappy = fast, zstd = better compression)
      # Keep snappy for journal - speed is important for write durability
      # Journal is temporary and auto-purged, compression savings minimal
      journalCompressor: snappy

      # Directory for journal (optional)
      # directoryForIndexes: true  # Separate directory for indexes

    collectionConfig:
      # Block compressor for collections
      # snappy = fast compression (recommended)
      # zstd = better compression but slower (~30% better than snappy)
      # For maximum document storage: use zstd to save 30%+ disk space
      # This allows storing 30% more emails/documents in the same space
      blockCompressor: zstd

    indexConfig:
      # Prefix compression for indexes (reduces index size)
      # Enabled: saves significant disk space for indexes
      # WildDuck has many indexes (username, addresses, message UIDs, etc.)
      # This can save 20-50% of index space
      prefixCompression: true

# ==============================================================================
# REPLICATION (for production high availability)
# ==============================================================================

# Uncomment and configure for replica sets
# replication:
#   # Replica set name (must be same on all replica members)
#   replSetName: wildduck-rs
#
#   # Oplog size in MB (default: 5% of free disk space)
#   # Recommended: 10GB+ for production
#   oplogSizeMB: 10240

# ==============================================================================
# SYSTEM LOG
# ==============================================================================

systemLog:
  # Log destination (file or syslog)
  destination: file

  # Log file path
  # Windows: Use forward slashes or double backslashes
  path: C:\MongoDB\log\mongod.log

  # Append to existing log file (don't overwrite on restart)
  logAppend: true

  # Log verbosity level
  # 0 = Info (default, recommended for production)
  # 1-5 = Debug levels (more verbose)
  verbosity: 0

  # Component-specific log levels (optional)
  component:
    accessControl:
      verbosity: 0
    command:
      verbosity: 0
    storage:
      verbosity: 0
      journal:
        verbosity: 0
    write:
      verbosity: 0

  # Log rotation
  # For minimal disk usage: rename causes MongoDB to create new log
  # Use rename with scheduled task to delete old logs
  logRotate: rename

  # Timestamp format
  timeStampFormat: iso8601-local

# ==============================================================================
# PROCESS MANAGEMENT
# ==============================================================================

processManagement:
  # Run as Windows Service
  windowsService:
    serviceName: MongoDB
    displayName: MongoDB Server
    description: MongoDB Database Server for WildDuck Mail

    # Service account (leave blank for Local System)
    # serviceUser: ""
    # servicePassword: ""

# ==============================================================================
# OPERATION PROFILING (Performance Monitoring)
# ==============================================================================

operationProfiling:
  # Profiling level:
  # 0 = Off
  # 1 = Log slow operations only
  # 2 = Log all operations (debug only, huge overhead)
  mode: slowOp

  # Slow operation threshold in milliseconds
  # For minimal disk usage: only log very slow operations (>1 second)
  slowOpThresholdMs: 1000

  # Sample rate for profiling (0.0 to 1.0)
  # For minimal disk usage: reduce sampling to 10%
  # This keeps profiling database small
  slowOpSampleRate: 0.1

# ==============================================================================
# SETPARAMETER (Advanced Options)
# ==============================================================================

setParameter:
  # Authentication failure delay (security)
  # Delays failed authentication attempts to prevent brute force
  authenticationMechanisms: SCRAM-SHA-256,SCRAM-SHA-1

  # Diagnostic data collection (optional, for MongoDB Atlas support)
  diagnosticDataCollectionEnabled: false

  # Enable detailed query logging
  logLevel: 0

  # Connection pool settings
  # Maximum time a pooled connection can remain idle (milliseconds)
  # Default: 30 minutes
  # connPoolMaxIdleTimeSecs: 1800

  # Disable transparent huge pages (THP) warning
  # Note: This is a parameter, actual THP should be disabled at OS level
  # suppressNoTLSPeerCertificateWarning: true

# ==============================================================================
# WildDuck-Specific Recommendations
# ==============================================================================

# WildDuck-Specific Optimizations for Maximum Document Storage:
#
# 1. **GridFS for email attachments** - zstd compression saves 30%+ space
# 2. **Large collections** - messages collection can grow to millions of documents per user
# 3. **Index compression** - prefixCompression reduces index size by 20-50%
# 4. **Full-text search indexes** - compressed to save space
# 5. **TTL indexes** - auto-cleanup expired documents (frees space automatically)
# 6. **Capped collections** - audit logs with size limits
#
# Storage Optimization Strategy:
# - **zstd compression**: ~30% smaller than snappy (more emails in same space)
# - **Index compression**: Saves 20-50% on index storage
# - **Large cache (47GB)**: Reduces disk I/O, extends SSD lifespan
# - **Minimal logging**: Log rotation and cleanup preserves storage for emails
# - **TTL indexes**: Auto-delete expired messages/sessions to reclaim space
# - **Regular backups**: 30-day retention with compression
#
# With these optimizations on 10TB RAID6 SSD:
# - ~13TB effective storage (30% compression gain)
# - Millions of emails per WildDuck user account possible
# - Fast random access for email retrieval
# - Automatic space reclamation via TTL indexes

# ==============================================================================
# PRODUCTION CHECKLIST
# ==============================================================================

# Before deploying to production:
# [ ] Enable authentication (security.authorization: enabled)
# [ ] Create admin user (see init_database.js)
# [ ] Create wildduck user with dbOwner role
# [ ] Change bindIp from 0.0.0.0 to specific IPs
# [ ] Configure Windows Firewall (port 27017)
# [ ] Set up automated backups (backup_database.ps1)
# [ ] Configure log rotation
# [ ] Monitor disk space (data + log + backups)
# [ ] Consider replica set for high availability
# [ ] Disable JavaScript execution (javascriptEnabled: false)
# [ ] Review and adjust cache size based on RAM
# [ ] Set up monitoring (MongoDB Compass, Ops Manager, or Prometheus)

# ==============================================================================
# PERFORMANCE TUNING GUIDE
# ==============================================================================

# Memory:
# - cacheSizeGB: 50% of (Total RAM - 1GB) for dedicated MongoDB server
# - High-capacity server (96GB available): cacheSizeGB: 47
# - Large cache = more documents in RAM = faster access + less disk wear
# - With 47GB cache: Can keep ~100M-500M documents hot in memory (depending on size)
# - Leave some RAM for OS and file system cache

# Disk:
# - RAID6 SSD: Excellent performance for both reads and writes
# - 10TB RAID6 SSD provides massive space for mail archive with redundancy
# - SSDs provide consistent low-latency I/O for GridFS (email attachments)
# - RAID6 offers data protection with 2-drive failure tolerance
# - Monitor disk I/O with Performance Monitor
# - zstd compression saves ~30% disk space vs snappy (important for maximizing accounts)

# Network:
# - Use compression (snappy or zstd) to reduce bandwidth
# - Monitor maxIncomingConnections usage
# - Use connection pooling in application (WildDuck does this)

# Indexes:
# - WildDuck creates indexes automatically
# - Monitor index usage: db.collection.stats()
# - Remove unused indexes to save disk and RAM

# ==============================================================================
# TROUBLESHOOTING
# ==============================================================================

# MongoDB won't start:
# 1. Check log file: C:\MongoDB\log\mongod.log
# 2. Verify dbPath exists and has write permissions
# 3. Check port 27017 is not in use: netstat -an | findstr :27017
# 4. Validate config syntax: mongod --config mongod.cfg --configExpand rest --outputConfig

# Authentication issues:
# 1. Verify users exist: use admin; db.getUsers()
# 2. Check authSource in connection string
# 3. Ensure security.authorization is enabled
# 4. Review systemLog for authentication failures

# Performance issues:
# 1. Check slow queries: db.system.profile.find()
# 2. Monitor cache hit ratio: db.serverStatus().wiredTiger.cache
# 3. Review indexes: db.collection.getIndexes()
# 4. Check disk I/O with Performance Monitor

# Connection issues:
# 1. Verify bindIp includes client's network
# 2. Check Windows Firewall rules
# 3. Test connectivity: Test-NetConnection -ComputerName IP -Port 27017
# 4. Review maxIncomingConnections limit

# ==============================================================================
# REFERENCES
# ==============================================================================

# Official Documentation:
# - Configuration Options: https://docs.mongodb.com/manual/reference/configuration-options/
# - WiredTiger: https://docs.mongodb.com/manual/core/wiredtiger/
# - Security: https://docs.mongodb.com/manual/security/
# - Replication: https://docs.mongodb.com/manual/replication/
# - Monitoring: https://docs.mongodb.com/manual/administration/monitoring/

# WildDuck Documentation:
# - GitHub: https://github.com/nodemailer/wildduck
# - Setup Guide: https://wildduck.email/

# ==============================================================================
# VERSION HISTORY
# ==============================================================================

# Version: 1.0.0
# Date: 2025-10-05
# MongoDB: 7.0
# Target OS: Windows Server
# Purpose: WildDuck Mail Server Production Deployment
