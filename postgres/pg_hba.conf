# PostgreSQL Client Authentication Configuration File
# ===================================================
#
# This file controls: which hosts are allowed to connect, how clients
# are authenticated, which PostgreSQL user names they can use, which
# databases they can access.
#
# IMPORTANT: Edit this file for your specific security requirements!
# Replace placeholder IPs with your actual application server IPs.
#
# Records take the form:
#
# TYPE  DATABASE        USER            ADDRESS                 METHOD
#
# TYPE: local, host, hostssl, hostnossl, hostgssenc, hostnogssenc
# DATABASE: database name(s), "all", "sameuser", "samerole", "replication"
# USER: user name(s), "all", "+group_name"
# ADDRESS: IP address or hostname, with optional CIDR mask
# METHOD: trust, reject, md5, scram-sha-256, gss, sspi, ident, peer, ldap, radius, cert, pam

#==============================================================================
# SECURITY RECOMMENDATIONS
#==============================================================================
#
# 1. Use scram-sha-256 instead of md5 (more secure)
# 2. Specify exact IP addresses instead of 0.0.0.0/0
# 3. Use hostssl for remote connections (requires SSL setup)
# 4. Grant access only to specific databases/users, not "all"
# 5. Review this file regularly
#
# For production:
# - Remove any 0.0.0.0/0 entries
# - Replace with actual IP addresses
# - Enable SSL connections (hostssl)
# - Use strong passwords with scram-sha-256

#==============================================================================
# LOCAL CONNECTIONS (from the server itself)
#==============================================================================

# TYPE  DATABASE        USER            ADDRESS                 METHOD

# Local connections via Unix domain sockets (Linux/Mac)
# On Windows, this is ignored
local   all             all                                     scram-sha-256

# Local connections via TCP/IP (localhost)
# IPv4 localhost
host    all             all             127.0.0.1/32            scram-sha-256

# IPv6 localhost
host    all             all             ::1/128                 scram-sha-256

#==============================================================================
# REMOTE CONNECTIONS - PRODUCTION CONFIGURATION
#==============================================================================
#
# IMPORTANT: Replace these placeholder IPs with your actual server IPs!
#
# Examples:
# - Docker on same machine: 172.17.0.0/16
# - Application server: specific IP like 192.168.1.50/32
# - VPN network: 10.0.0.0/24
# - Specific developer: 203.0.113.42/32

# --- Docker Containers (if running on same Windows machine) ---
# Allow Docker containers to connect
# Docker default bridge network uses 172.17.0.0/16
host    mail_box_indexer    ponder          172.17.0.0/16           scram-sha-256

# Docker custom networks may use different ranges
# Check with: docker network inspect NETWORK_NAME
# host    mail_box_indexer    ponder          172.18.0.0/16           scram-sha-256

# --- Application Servers (CHANGE THESE IPs!) ---
# Replace YOUR_APP_SERVER_IP with actual IP address
# Use /32 for single IP, /24 for subnet

# Example: Allow from specific application server
# host    mail_box_indexer    ponder          192.168.1.100/32        scram-sha-256

# Example: Allow from application server subnet
# host    mail_box_indexer    ponder          192.168.1.0/24          scram-sha-256

# Example: Allow from VPN network
# host    mail_box_indexer    ponder          10.8.0.0/24             scram-sha-256

# --- Developers / Admins (CHANGE THESE IPs!) ---
# Allow specific developers to connect with pgAdmin or psql
# Replace with actual developer IPs

# Example: Allow developer workstation
# host    all                 postgres        203.0.113.42/32         scram-sha-256

# Example: Allow from office network
# host    all                 postgres        198.51.100.0/24         scram-sha-256

# --- SSL Required Connections (Recommended for Production) ---
# Use 'hostssl' instead of 'host' to require SSL/TLS
# Requires SSL configuration in postgresql.conf

# Example: Require SSL for remote connections
# hostssl mail_box_indexer    ponder          192.168.1.0/24          scram-sha-256
# hostssl all                 postgres        198.51.100.0/24         scram-sha-256

#==============================================================================
# TEMPORARY - DEVELOPMENT/TESTING ONLY
#==============================================================================
#
# WARNING: These entries allow connections from ANYWHERE!
# REMOVE these lines in production and use specific IPs above.
#
# For initial testing, you can uncomment ONE of these:

# Allow from any IP with password (INSECURE - testing only!)
# host    mail_box_indexer    ponder          0.0.0.0/0               scram-sha-256

# Allow from any IP on any database (VERY INSECURE - testing only!)
# host    all                 all             0.0.0.0/0               scram-sha-256

#==============================================================================
# REPLICATION CONNECTIONS
#==============================================================================
#
# If you set up streaming replication, add entries here
# TYPE       DATABASE        USER            ADDRESS                 METHOD

# Example: Allow replication user from standby server
# host       replication     replicator      192.168.1.101/32        scram-sha-256

#==============================================================================
# REJECT CONNECTIONS (Explicit Deny)
#==============================================================================
#
# You can explicitly reject connections from specific IPs
# These rules are processed in order, so put rejects before allows

# Example: Block specific IP
# host    all                 all             198.51.100.66/32        reject

# Example: Block subnet
# host    all                 all             203.0.113.0/24          reject

#==============================================================================
# DATABASE-SPECIFIC ACCESS
#==============================================================================
#
# Grant access to specific databases only

# Example: Allow user 'app' to access only 'appdb' from app server
# host    appdb              app             192.168.1.50/32         scram-sha-256

# Example: Allow user 'readonly' read-only access (requires user with limited privileges)
# host    mail_box_indexer   readonly        192.168.1.0/24          scram-sha-256

#==============================================================================
# COMMON AUTHENTICATION METHODS
#==============================================================================
#
# scram-sha-256 (RECOMMENDED):
#   - Most secure password-based authentication
#   - Requires PostgreSQL 10+
#   - Use this for all password-based auth
#
# md5 (DEPRECATED):
#   - Less secure than scram-sha-256
#   - Still common for legacy systems
#   - Migrate to scram-sha-256 when possible
#
# trust (DANGEROUS):
#   - No authentication required
#   - NEVER use in production
#   - Only for local development on trusted networks
#
# reject:
#   - Explicitly deny connection
#   - Useful for blocking specific IPs
#
# cert:
#   - Use SSL client certificates
#   - Very secure but requires certificate infrastructure
#
# peer (Unix only):
#   - Match PostgreSQL username to OS username
#   - Only works for local connections
#
# ident:
#   - Use ident server for authentication
#   - Rarely used today
#
# sspi (Windows only):
#   - Use Windows integrated authentication
#   - Good for Windows environments with Active Directory
#
# For SSL/TLS required connections:
#   - Use 'hostssl' instead of 'host'
#   - Configure SSL in postgresql.conf
#   - Place SSL certificate files in data directory

#==============================================================================
# CONFIGURATION AFTER EDITING THIS FILE
#==============================================================================
#
# 1. Save this file to: C:\PostgreSQL\data\pg_hba.conf
#    (or C:\Program Files\PostgreSQL\17\data\pg_hba.conf)
#
# 2. Reload PostgreSQL configuration:
#    Method A (PowerShell as Admin):
#      Restart-Service postgresql-x64-17
#
#    Method B (psql):
#      psql -U postgres -c "SELECT pg_reload_conf();"
#
# 3. Test connection from remote machine:
#    psql -h SERVER_IP -U ponder -d mail_box_indexer
#
# 4. Check logs for authentication failures:
#    C:\PostgreSQL\data\log\postgresql-*.log
#
# 5. Monitor authentication with:
#    SELECT * FROM pg_stat_activity;
#
# For troubleshooting connection issues, temporarily enable more logging
# in postgresql.conf:
#   log_connections = on
#   log_disconnections = on
#   log_hostname = on
#   log_line_prefix = '%t [%p]: [%l-1] user=%u,db=%d,app=%a,client=%h '

#==============================================================================
# MIGRATION FROM md5 TO scram-sha-256
#==============================================================================
#
# If you have existing users with md5 passwords:
#
# 1. Set in postgresql.conf:
#    password_encryption = scram-sha-256
#
# 2. Update user passwords (forces rehash):
#    ALTER USER ponder WITH PASSWORD 'same_password';
#
# 3. Change 'md5' to 'scram-sha-256' in this file
#
# 4. Reload configuration:
#    SELECT pg_reload_conf();

#==============================================================================
# END OF FILE
#==============================================================================
