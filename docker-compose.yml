# WildDuck Dockerized - Main Deployment Configuration
# See .claude/PROJECT_CONTEXT.md for architecture overview
# See ENDPOINTS.md for API reference
# See .env.example for configuration options

# Persistent data volumes
volumes:
  mongo:      # User accounts, mailboxes, messages
  redis:      # Sessions, cache, queues
  postgres:   # Blockchain indexing data
  traefik:    # Traefik configuration and certificates

# Custom network with static IP allocation
networks:
  wildduck_network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16
          gateway: 172.20.0.1

services:
  # WildDuck - IMAP/POP3/API Server
  # Handles mail protocols and provides REST API for management
  # API accessible at http://HOSTNAME/api and https://HOSTNAME/api
  wildduck:
    image: johnqh/wildduck:latest
    restart: unless-stopped
    ports:
      - "127.0.0.1:8080:8080"
      # - "143:143" # for local testing
      # - "110:110" # for local testing
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./config/wildduck:/wildduck/config
    environment:
      - NODE_ENV=production
      - APPCONF_api_indexerBaseUrl=http://mail_box_indexer:42069
    networks:
      wildduck_network:
        ipv4_address: 172.20.0.10
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://127.0.0.1:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      # Enable Traefik routing for this service
      traefik.enable: true

      # IMAPS (Port 993) - Secure IMAP over TLS
      traefik.tcp.routers.wildduck-imaps.entrypoints: imaps
      traefik.tcp.routers.wildduck-imaps.rule: HostSNI(`HOSTNAME`)
      traefik.tcp.routers.wildduck-imaps.tls: true
      # traefik.tcp.routers.wildduck-imaps.tls.certresolver: letsencrypt  # Uncomment for Let's Encrypt
      traefik.tcp.routers.wildduck-imaps.service: wildduck-imaps
      traefik.tcp.services.wildduck-imaps.loadbalancer.server.port: 143

      # POP3S (Port 995) - Secure POP3 over TLS
      traefik.tcp.routers.wildduck-pop3s.entrypoints: pop3s
      traefik.tcp.routers.wildduck-pop3s.rule: HostSNI(`HOSTNAME`)
      traefik.tcp.routers.wildduck-pop3s.tls: true
      # traefik.tcp.routers.wildduck-pop3s.tls.certresolver: letsencrypt  # Uncomment for Let's Encrypt
      traefik.tcp.routers.wildduck-pop3s.service: wildduck-pop3s
      traefik.tcp.services.wildduck-pop3s.loadbalancer.server.port: 110

      # HTTP API (Port 80) - REST API at /api path
      traefik.http.routers.wildduck-api-path-http.entrypoints: web
      traefik.http.routers.wildduck-api-path-http.rule: Host(`HOSTNAME`) && PathPrefix(`/api`)
      traefik.http.routers.wildduck-api-path-http.middlewares: wildduck-api-cors@docker,wildduck-api-stripprefix@docker
      traefik.http.routers.wildduck-api-path-http.priority: 100
      traefik.http.routers.wildduck-api-path-http.service: wildduck-api-path

      # HTTPS API (Port 443) - REST API at /api path
      traefik.http.routers.wildduck-api-path.entrypoints: websecure
      traefik.http.routers.wildduck-api-path.rule: Host(`HOSTNAME`) && PathPrefix(`/api`)
      traefik.http.routers.wildduck-api-path.tls.certresolver: letsencrypt
      traefik.http.routers.wildduck-api-path.middlewares: wildduck-api-cors@docker,wildduck-api-stripprefix@docker
      traefik.http.services.wildduck-api-path.loadbalancer.server.port: 8080

      # Middleware: CORS headers for API access from localhost and other origins
      traefik.http.middlewares.wildduck-api-cors.headers.accesscontrolallowmethods: GET,POST,PUT,DELETE,OPTIONS,PATCH
      traefik.http.middlewares.wildduck-api-cors.headers.accesscontrolallowheaders: "*"
      traefik.http.middlewares.wildduck-api-cors.headers.accesscontrolalloworiginlistregex: ".*"
      traefik.http.middlewares.wildduck-api-cors.headers.accesscontrolmaxage: 100
      traefik.http.middlewares.wildduck-api-cors.headers.addvaryheader: true
      traefik.http.middlewares.wildduck-api-cors.headers.accesscontrolallowcredentials: true

      # Middleware: Strip /api prefix before forwarding to WildDuck
      # Converts http(s)://HOSTNAME/api/users â†’ http://wildduck:8080/users
      traefik.http.middlewares.wildduck-api-stripprefix.stripprefix.prefixes: /api

  # ZoneMTA - Outbound SMTP Server
  # Queues and sends outgoing emails
  # Handles DKIM signing and delivery retries
  zonemta:
    image: ghcr.io/zone-eu/zonemta-wildduck:1.32.20
    restart: unless-stopped
    # ports:
    #   - "587:587" # Uncomment for local testing
    depends_on:
      - mongo
      - redis
    volumes:
      - ./config/zone-mta:/app/config
    environment:
      - NODE_ENV=production
    networks:
      - wildduck_network
    labels:
      traefik.enable: true
      # SMTPS (Port 465) - Secure SMTP for sending
      traefik.tcp.routers.zonemta.entrypoints: smtps
      traefik.tcp.routers.zonemta.rule: HostSNI(`HOSTNAME`)
      traefik.tcp.routers.zonemta.tls: true
      # traefik.tcp.routers.zonemta.tls.certresolver: letsencrypt  # Uncomment for Let's Encrypt
      traefik.tcp.services.zonemta.loadbalancer.server.port: 587

  # Haraka - Inbound SMTP Server
  # Receives incoming emails from the internet
  # Integrates with Rspamd for spam filtering
  haraka:
    image: johnqh/haraka:latest
    restart: unless-stopped
    ports:
      - "25:25"  # SMTP port must be exposed directly (not via Traefik)
    depends_on:
      - mongo
      - redis
      - rspamd
    volumes:
      - ./config/haraka:/app/config
      - ./certs/HOSTNAME-key.pem:/app/config/tls_key.pem  # TLS certificate
      - ./certs/HOSTNAME.pem:/app/config/tls_cert.pem      # TLS certificate
    networks:
      - wildduck_network

  # Rspamd - Spam Filter
  # Analyzes incoming emails for spam/phishing
  # Provides DKIM/SPF/DMARC verification
  rspamd:
    image: nodemailer/rspamd
    restart: unless-stopped
    depends_on:
      - redis
    volumes:
      - ./config/rspamd/override.d:/etc/rspamd/override.d
      - ./config/rspamd/worker-normal.conf:/etc/rspamd/worker-normal.conf
      - ./config/rspamd/local.d:/etc/rspamd/local.d
    networks:
      - wildduck_network

  # MongoDB - Primary Database
  # Stores user accounts, mailboxes, messages, and configuration
  # Shared by WildDuck, ZoneMTA, and Haraka
  mongo:
    image: mongo
    restart: unless-stopped
    volumes:
      - mongo:/data/db  # Persistent storage for database
    networks:
      - wildduck_network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Redis - Cache and Session Store
  # Used for sessions, rate limiting, and temporary data
  # Shared across all services
  redis:
    image: redis:alpine
    restart: unless-stopped
    volumes:
      - redis:/data  # Persistent storage for Redis data
    networks:
      - wildduck_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  # Mail Box Indexer - Blockchain Integration Service
  # Indexes blockchain events for wallet-based email addresses
  # Provides OAuth 2.0 authentication and points system
  # API accessible at http://HOSTNAME/idx and https://HOSTNAME/idx
  mail_box_indexer:
    image: johnqh/mail_box_indexer:latest
    restart: unless-stopped
    # ports:
    #   - "127.0.0.1:42069:42069" # Uncomment for local API access
    depends_on:
      postgres:
        condition: service_healthy  # Wait for PostgreSQL to be ready
      mongo:
        condition: service_healthy  # Needs MongoDB for user lookup
      redis:
        condition: service_healthy  # Uses Redis for caching
    # All configuration via environment variables (see .env.example)
    environment:
      - NODE_ENV=production
      - DATABASE_URL=${DATABASE_URL}  # Required from Doppler
      - DATABASE_SCHEMA=${DATABASE_SCHEMA:-public}
      - EMAIL_DOMAIN=${EMAIL_DOMAIN:-0xmail.box}
      - WILDDUCK_ENDPOINT_URL=http://wildduck:8080
      - WILDDUCK_IP_ADDRESS=${WILDDUCK_IP_ADDRESS:-172.20.0.10}
      - INDEXER_PRIVATE_KEY=${INDEXER_PRIVATE_KEY}
      - INDEXER_WALLET_ADDRESS=${INDEXER_WALLET_ADDRESS}
      - ALCHEMY_API_KEY=${ALCHEMY_API_KEY}
      - POINTS_EMAIL_BACKEND_IP=${POINTS_EMAIL_BACKEND_IP:-127.0.0.1}
      - POINTS_ADMIN_FRONTEND_IP=${POINTS_ADMIN_FRONTEND_IP:-127.0.0.1}
      - ENABLE_TESTNETS=${ENABLE_TESTNETS:-false}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - PONDER_TELEMETRY_DISABLED=${PONDER_TELEMETRY_DISABLED:-true}
      - KYC_ENABLED=${KYC_ENABLED:-false}
      - SUMSUB_APP_TOKEN=${SUMSUB_APP_TOKEN:-}
      - SUMSUB_SECRET_KEY=${SUMSUB_SECRET_KEY:-}
      - SUMSUB_WEBHOOK_SECRET=${SUMSUB_WEBHOOK_SECRET:-}
      - SUMSUB_BASE_URL=${SUMSUB_BASE_URL:-https://test-api.sumsub.com}
      - HELIUS_API_KEY=${HELIUS_API_KEY:-}
      - API_URL=${API_URL:-http://localhost:42069}
      - REVENUECAT_API_KEY=${REVENUECAT_API_KEY:-}
      - REVENUECAT_NAMESERVICE_ENTITLEMENT=${REVENUECAT_NAMESERVICE_ENTITLEMENT:-nameservice}
    networks:
      wildduck_network:
        ipv4_address: 172.20.0.20
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:42069/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 120s
    labels:
      traefik.enable: true

      # HTTP API (Port 80) - Blockchain indexer API at /idx path
      traefik.http.routers.mail-box-indexer-http.entrypoints: web
      traefik.http.routers.mail-box-indexer-http.rule: Host(`HOSTNAME`) && PathPrefix(`/idx`)
      traefik.http.routers.mail-box-indexer-http.middlewares: mail-box-indexer-stripprefix@docker
      traefik.http.routers.mail-box-indexer-http.priority: 100
      traefik.http.routers.mail-box-indexer-http.service: mail-box-indexer

      # HTTPS API (Port 443) - Blockchain indexer API at /idx path
      traefik.http.routers.mail-box-indexer.entrypoints: websecure
      traefik.http.routers.mail-box-indexer.rule: Host(`HOSTNAME`) && PathPrefix(`/idx`)
      traefik.http.routers.mail-box-indexer.tls: true
      traefik.http.routers.mail-box-indexer.tls.certresolver: letsencrypt
      traefik.http.routers.mail-box-indexer.middlewares: mail-box-indexer-stripprefix@docker
      traefik.http.services.mail-box-indexer.loadbalancer.server.port: 42069

      # Middleware: Strip /idx prefix before forwarding to indexer
      # Converts http(s)://HOSTNAME/idx/users â†’ http://mail_box_indexer:42069/users
      traefik.http.middlewares.mail-box-indexer-stripprefix.stripprefix.prefixes: /idx

  # PostgreSQL - Indexer Database
  # Stores blockchain event data and indexing state
  # Used exclusively by Mail Box Indexer (Ponder framework)
  postgres:
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_DB: mail_box_indexer         # Database name
      POSTGRES_USER: ponder                 # Database user
      POSTGRES_PASSWORD: password           # Database password (change in production!)
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "127.0.0.1:5432:5432"  # Expose only on localhost for debugging
    volumes:
      - postgres:/var/lib/postgresql/data  # Persistent storage
    networks:
      - wildduck_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ponder -d mail_box_indexer"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Traefik - Reverse Proxy and Load Balancer
  # Handles TLS termination and routing for all services
  # Automatically obtains Let's Encrypt certificates
  traefik:
    image: traefik:3.3.4
    restart: unless-stopped
    command:
      # Entry points (listening ports)
      - "--entrypoints.web.address=:80"           # HTTP
      - "--entrypoints.websecure.address=:443"    # HTTPS
      - "--entrypoints.imaps.address=:993"        # IMAPS
      - "--entrypoints.pop3s.address=:995"        # POP3S
      - "--entrypoints.smtps.address=:465"        # SMTPS

      # Docker provider - auto-discover services from Docker labels
      - "--providers.docker"
      - "--providers.docker.exposedByDefault=false"  # Only expose services with traefik.enable=true

      # File provider - load static configuration from files
      - "--providers.file=true"
      - "--providers.file.directory=/etc/traefik/dynamic_conf"
      - "--providers.file.watch=true"

      # TLS/SSL configuration
      - "--serversTransport.insecureSkipVerify=true"
      - "--serversTransport.rootCAs=/etc/traefik/certs/rootCA.pem"

      # Logging
      - "--log.level=DEBUG"

      # Let's Encrypt configuration (uncomment for production)
      # - "--certificatesresolvers.letsencrypt.acme.email=ACME_EMAIL"
      # - "--certificatesresolvers.letsencrypt.acme.storage=/data/acme.json"
      # - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
    labels:
      traefik.enable: true
      # HTTP to HTTPS redirect middleware
      traefik.http.middlewares.redirect-to-https.redirectscheme.scheme: https
      # Apply redirect to all HTTP traffic
      traefik.http.routers.redirs.entrypoints: web
      traefik.http.routers.redirs.middlewares: redirect-to-https
      traefik.http.routers.redirs.rule: hostregexp(`{host:.+}`)

    ports:
      - 80:80/tcp      # HTTP (handles /api and /idx, redirects others to HTTPS)
      - 443:443/tcp    # HTTPS
      - 993:993/tcp    # IMAPS
      - 995:995/tcp    # POP3S
      - 465:465/tcp    # SMTPS
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro  # Docker API access (read-only)
      - traefik:/data                                  # Persistent storage (ACME certificates)
      - ./certs:/etc/traefik/certs                     # SSL/TLS certificates
      - ./dynamic_conf:/etc/traefik/dynamic_conf:ro    # Static configuration files
    networks:
      - wildduck_network
