version: "3.8"
volumes:
  mongo:
  redis:
  postgres:
  traefik:
services:
  wildduck:
    image: johnqh/wildduck:latest
    restart: unless-stopped
    ports:
      - "127.0.0.1:8080:8080"
      # - "143:143" # for local testing
      # - "110:110" # for local testing
    depends_on:
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    volumes:
      - ./config/wildduck:/wildduck/config
    environment:
      - NODE_ENV=production
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    labels:
      traefik.enable: true
      traefik.tcp.routers.wildduck-imaps.entrypoints: imaps
      traefik.tcp.routers.wildduck-imaps.rule: HostSNI(`HOSTNAME`)
      # traefik.tcp.routers.wildduck-imaps.tls.certresolver: letsencrypt
      traefik.tcp.routers.wildduck-imaps.tls: true
      traefik.tcp.routers.wildduck-imaps.service: wildduck-imaps
      traefik.tcp.services.wildduck-imaps.loadbalancer.server.port: 143
      traefik.tcp.routers.wildduck-pop3s.entrypoints: pop3s
      traefik.tcp.routers.wildduck-pop3s.rule: HostSNI(`HOSTNAME`)
      # traefik.tcp.routers.wildduck-pop3s.tls.certresolver: letsencrypt
      traefik.tcp.routers.wildduck-pop3s.tls: true
      traefik.tcp.routers.wildduck-pop3s.service: wildduck-pop3s
      traefik.tcp.services.wildduck-pop3s.loadbalancer.server.port: 110
      traefik.http.routers.wildduck-api-path.entrypoints: websecure # Expose over HTTPS

      # Rule: Match the host and require the /api path prefix
      traefik.http.routers.wildduck-api-path.rule: Host(`HOSTNAME`) && PathPrefix(`/api`)
      # traefik.http.routers.wildduck-api-path.rule: Host(`HOSTNAME`)

      # traefik.http.routers.wildduck-api-path.tls: true
      traefik.http.routers.wildduck-api-path.tls.certresolver: letsencrypt # Get a Let's Encrypt cert
      traefik.http.routers.wildduck-api-path.middlewares: wildduck-api-stripprefix@docker
      traefik.http.services.wildduck-api-path.loadbalancer.server.port: 8080

      # Middleware definition: This must be on the same level as the router/service definitions
      # It creates a middleware named 'wildduck-api-stripprefix'
      traefik.http.middlewares.wildduck-api-stripprefix.stripprefix.prefixes: /api

  zonemta:
    image: ghcr.io/zone-eu/zonemta-wildduck:1.32.20
    restart: unless-stopped
    # ports:
    #   - "587:587" # for local testing
    depends_on:
      - mongo
      - redis
    volumes:
      - ./config/zone-mta:/app/config
    labels:
      traefik.enable: true
      traefik.tcp.routers.zonemta.entrypoints: smtps
      traefik.tcp.routers.zonemta.rule: HostSNI(`HOSTNAME`)
      # traefik.tcp.routers.zonemta.tls.certresolver: letsencrypt
      traefik.tcp.routers.zonemta.tls: true
      traefik.tcp.services.zonemta.loadbalancer.server.port: 587

  haraka:
    image: johnqh/haraka-plugin-wildduck:latest
    restart: unless-stopped
    ports:
      - "25:25"
    depends_on:
      - mongo
      - redis
      - rspamd
    volumes:
      - ./config/haraka:/app/config
      - ./certs/HOSTNAME-key.pem:/app/config/tls_key.pem
      - ./certs/HOSTNAME.pem:/app/config/tls_cert.pem

  rspamd:
    image: nodemailer/rspamd
    restart: unless-stopped
    depends_on:
      - redis
    volumes:
      - ./config/rspamd/override.d:/etc/rspamd/override.d
      - ./config/rspamd/worker-normal.conf:/etc/rspamd/worker-normal.conf
      - ./config/rspamd/local.d:/etc/rspamd/local.d

  mongo:
    image: mongo
    restart: unless-stopped
    volumes:
      - mongo:/data/db
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  redis:
    image: redis:alpine
    restart: unless-stopped
    volumes:
      - redis:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s

  mail_box_indexer:
    image: johnqh/mail_box_indexer:latest
    restart: unless-stopped
    # ports:
    #   - "127.0.0.1:42069:42069" # for local testing
    depends_on:
      postgres:
        condition: service_healthy
      mongo:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgresql://ponder:password@postgres:5432/mail_box_indexer
      - DATABASE_SCHEMA=public
      - EMAIL_DOMAIN=${EMAIL_DOMAIN:-0xmail.box}
      - WILDDUCK_ENDPOINT_URL=http://wildduck:8080
      - WILDDUCK_IP_ADDRESS=${WILDDUCK_IP_ADDRESS:-127.0.0.1}
      - INDEXER_PRIVATE_KEY=${INDEXER_PRIVATE_KEY}
      - INDEXER_WALLET_ADDRESS=${INDEXER_WALLET_ADDRESS}
      - ALCHEMY_API_KEY=${ALCHEMY_API_KEY}
      - POINTS_EMAIL_BACKEND_IP=${POINTS_EMAIL_BACKEND_IP:-127.0.0.1}
      - POINTS_ADMIN_FRONTEND_IP=${POINTS_ADMIN_FRONTEND_IP:-127.0.0.1}
      - ENABLE_TESTNETS=${ENABLE_TESTNETS:-false}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - PONDER_TELEMETRY_DISABLED=${PONDER_TELEMETRY_DISABLED:-true}
      - KYC_ENABLED=${KYC_ENABLED:-false}
      - SUMSUB_APP_TOKEN=${SUMSUB_APP_TOKEN:-}
      - SUMSUB_SECRET_KEY=${SUMSUB_SECRET_KEY:-}
      - SUMSUB_WEBHOOK_SECRET=${SUMSUB_WEBHOOK_SECRET:-}
      - SUMSUB_BASE_URL=${SUMSUB_BASE_URL:-https://test-api.sumsub.com}
      - HELIUS_API_KEY=${HELIUS_API_KEY:-}
      - API_URL=${API_URL:-http://localhost:42069}
      - REVENUECAT_API_KEY=${REVENUECAT_API_KEY:-}
      - REVENUECAT_NAMESERVICE_ENTITLEMENT=${REVENUECAT_NAMESERVICE_ENTITLEMENT:-nameservice}
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost:42069/health"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 120s
    labels:
      traefik.enable: true
      traefik.http.routers.mail-box-indexer.entrypoints: websecure
      traefik.http.routers.mail-box-indexer.rule: Host(`HOSTNAME`) && PathPrefix(`/idx`)
      traefik.http.routers.mail-box-indexer.tls: true
      traefik.http.routers.mail-box-indexer.tls.certresolver: letsencrypt
      traefik.http.routers.mail-box-indexer.middlewares: mail-box-indexer-stripprefix@docker
      traefik.http.services.mail-box-indexer.loadbalancer.server.port: 42069
      traefik.http.middlewares.mail-box-indexer-stripprefix.stripprefix.prefixes: /idx

  postgres:
    image: postgres:15
    restart: unless-stopped
    environment:
      POSTGRES_DB: mail_box_indexer
      POSTGRES_USER: ponder
      POSTGRES_PASSWORD: password
      POSTGRES_INITDB_ARGS: "--encoding=UTF-8"
    ports:
      - "127.0.0.1:5432:5432"
    volumes:
      - postgres:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ponder -d mail_box_indexer"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  traefik:
    image: traefik:3.3.4
    restart: unless-stopped
    command:
      - "--entrypoints.web.address=:80"
      - "--entrypoints.websecure.address=:443"
      - "--entrypoints.imaps.address=:993"
      - "--entrypoints.pop3s.address=:995"
      - "--entrypoints.smtps.address=:465"
      - "--providers.docker"
      - "--providers.docker.exposedByDefault=false"
      - "--providers.file=true"
      - "--providers.file.directory=/etc/traefik/dynamic_conf"
      - "--providers.file.watch=true"
      - "--serversTransport.insecureSkipVerify=true"
      - "--serversTransport.rootCAs=/etc/traefik/certs/rootCA.pem"
      - "--log.level=DEBUG"
      # - "--certificatesresolvers.letsencrypt.acme.email=ACME_EMAIL"
      # - "--certificatesresolvers.letsencrypt.acme.storage=/data/acme.json"
      # - "--certificatesresolvers.letsencrypt.acme.tlschallenge=true"
    labels:
      traefik.enable: true
      traefik.http.middlewares.redirect-to-https.redirectscheme.scheme: https
      traefik.http.routers.redirs.entrypoints: web
      traefik.http.routers.redirs.middlewares: redirect-to-https
      traefik.http.routers.redirs.rule: hostregexp(`{host:.+}`)

    ports:
      - 80:80/tcp
      - 443:443/tcp
      - 993:993/tcp
      - 995:995/tcp
      - 465:465/tcp
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - traefik:/data
      - ./certs:/etc/traefik/certs # Mount your certs directory
      - ./dynamic_conf:/etc/traefik/dynamic_conf:ro
